

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "ROC.web\Web.config"
//     Connection String Name: "RocContext"
//     Connection String:      "Data Source=(local);Initial Catalog=roc_wms;Integrated Security=True;Application Name=MyApp"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition
// Database Engine Edition: Express

namespace ROC.DAL
{
    using ROC.Modles;
    using System.Data.SqlClient;
    using System.Data.Entity;

    #region IRepository  czp modify 
    public partial interface IActionInfoRepository:IBaseRepository<ActionInfo>
    {
    }
    public partial interface IMenuClassRepository:IBaseRepository<MenuClass>
    {
    }
    #endregion   

    #region Repository
    public partial class ActionInfoRepository:BaseRepository<ActionInfo>,IActionInfoRepository
    {
    }
    public partial class MenuClassRepository:BaseRepository<MenuClass>,IMenuClassRepository
    {
    }
    #endregion

    public interface IDbSession
        {
        
            IActionInfoRepository ActionInfoRepository { get; set; }
        
            IMenuClassRepository MenuClassRepository { get; set; }
    
            /// <summary>
            /// 保存所有改变
            /// </summary>
            /// <returns></returns>
            int SaveChanges();
            /// <summary>
            /// 执行sql语句
            /// </summary>
            /// <param name="sql"></param>
            /// <param name="paras"></param>
            /// <returns></returns>
            int ExecuteSql(string sql, params SqlParameter[] paras);
        }

    public class DbSession:IDbSession
        {

        
            private IActionInfoRepository _ActionInfoRepository;
            public IActionInfoRepository ActionInfoRepository
            {
                get
                {
                    if (_ActionInfoRepository == null)
                    {
                        _ActionInfoRepository = new ActionInfoRepository();
                    }
                    return _ActionInfoRepository;
                }
                set
                {
                    _ActionInfoRepository = value;
                }
            }
        
            private IMenuClassRepository _MenuClassRepository;
            public IMenuClassRepository MenuClassRepository
            {
                get
                {
                    if (_MenuClassRepository == null)
                    {
                        _MenuClassRepository = new MenuClassRepository();
                    }
                    return _MenuClassRepository;
                }
                set
                {
                    _MenuClassRepository = value;
                }
            }
    
            public int SaveChanges()
            {
                IDbContextFactory dbFactory = new DbContextFactory();
                DbContext db = dbFactory.GetCurrentThreadInstance();
                return db.SaveChanges();
            }

            public int ExecuteSql(string sql, params System.Data.SqlClient.SqlParameter[] paras)
            {
                IDbContextFactory dbFactory = new DbContextFactory();
                DbContext db = dbFactory.GetCurrentThreadInstance();
                return db.Database.ExecuteSqlCommand(sql, paras);
            }
        }
}
